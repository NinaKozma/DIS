api:

  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfServiceUrl: MINE TERMS OF SERVICE URL
    license: License
    licenseUrl: MY LICENSE URL

    contact:
      name: Nina Kozma
      url: My LinkedIn --> https://www.linkedin.com/in/nina-kozma-1a347319/
      email: nina.kozma@gmail.com

  post-composite:

    get-composite-post:
      description: Returns a composite view of the specified post id
      notes: |
        # Normal response
        If the requested post id is found the method will return information regarding:
        1. Post information
        1. Comments
        1. Reactions
        1. Images
        1. Service Addresses
        (technical information regarding the addresses of the microservices that created the response)

        # Expected partial and error responses
        In the following cases, only a partial response be created (used to simplify testing of error conditions)

        ## Post id 113
        200 - Ok, but no reactions will be returned

        ## Post id 213
        200 - Ok, but no comments offers will be returned
        
         ## Post id 313
        200 - Ok, but no images will be returned

        ## Non numerical post id
        400 - A <b>Bad Request</b> error will be returned

        ## Post id 13
        404 - A <b>Not Found</b> error will be returned

        ## Negative Post ids
        422 - An <b>Unprocessable Entity</b> error will be returned

    create-composite-post:
      description: Creates a composite post
      notes: |
        # Normal response
        The composite post information posted to the API will be splitted up and stored as separate post-info, image, reaction and comment entities.

        # Expected error responses
        1. If a post with the same postId as specified in the posted information already exists,
           an <b>422 - Unprocessable Entity</b> error with a "duplicate key" error message will be returned

    delete-composite-post:
      description: Deletes a post composite
      notes: |
        # Normal response
        Entities for post information, images, reactions and comments related to the specificed postId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
        This means that a delete request of a non existing post will return <b>200 Ok</b>.

server.port: 7000
server.error.include-message: always

ribbon.ServerListRefreshInterval: 5000

ribbon.NFLoadBalancerPingInterval: 5   

spring.cloud.stream:
  defaultBinder: rabbit
  default.contentType: application/json
  bindings:
    output-posts:
      destination: posts
      producer:
        required-groups: auditGroup
    output-reactions:
      destination: reactions
      producer:
        required-groups: auditGroup
    output-comments:
      destination: comments
      producer:
        required-groups: auditGroup
    output-images:
      destination: images
      producer:
        required-groups: auditGroup

spring.security.oauth2.resourceserver.jwt.jwk-set-uri: http://${app.auth-server}:9999/.well-known/jwks.json 

app.post-service.timeoutSec: 2

resilience4j.retry:
  backends:
    post:
      maxRetryAttempts: 3
      waitDuration: 1000
      retryExceptions:
      - org.springframework.web.reactive.function.client.WebClientResponseException$InternalServerError

management.health.circuitbreakers.enabled: true

resilience4j.circuitbreaker:
  backends:
    post:
      registerHealthIndicator: true
      ringBufferSizeInClosedState: 5
      failureRateThreshold: 50
      waitDurationInOpenState: 10000
      ringBufferSizeInHalfOpenState: 3
      automaticTransitionFromOpenToHalfOpenEnabled: true
      ignoreExceptions:
        - se.magnus.util.exceptions.InvalidInputException
        - se.magnus.util.exceptions.NotFoundException   

logging:
  level:
    root: INFO
    se.magnus: DEBUG
    
---
spring.profiles: docker

server.port: 8080

---

spring.profiles: streaming_partitioned

spring.cloud.stream.bindings.output-posts.producer:
  partition-key-expression: payload.key
  partition-count: 2

spring.cloud.stream.bindings.output-comments.producer:
  partition-key-expression: payload.key
  partition-count: 2

spring.cloud.stream.bindings.output-reactions.producer:
  partition-key-expression: payload.key
  partition-count: 2
  
spring.cloud.stream.bindings.output-images.producer:
  partition-key-expression: payload.key
  partition-count: 2